/* Generated by AN DISI Unibo */ 
package it.unibo.userobotclient

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Userobotclient ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 val MyName = name  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("userobotclient STARTS $MyName")
						request("engage", "engage($MyName)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="work",cond=whenReply("engagedone"))
					transition(edgeName="t01",targetState="waittoengage",cond=whenReply("engagerefused"))
				}	 
				state("work") { //this:State
					action { //it:State
						forward("setrobotstate", "setpos(0,0,d)" ,"basicrobot" ) 
						 CommUtils.waitTheUser("$name | hit 1CR")  
						request("moverobot", "moverobot(6,4)" ,"basicrobot" )  
						 emitWithDelay("alarm","alarm(fire)", 4200)    
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="handleAnswer",cond=whenReply("moverobotdone"))
					transition(edgeName="t03",targetState="handleAnswer",cond=whenReply("moverobotfailed"))
				}	 
				state("handleAnswer") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("waittoengage") { //this:State
					action { //it:State
						CommUtils.outred("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
