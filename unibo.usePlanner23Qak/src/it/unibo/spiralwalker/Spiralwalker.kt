/* Generated by AN DISI Unibo */ 
package it.unibo.spiralwalker

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Spiralwalker ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		  var stepCounter        = 0
			val mapname            = "roomMapSquare"
			val maxNumSteps        = 4	 
			val planner            = unibo.planner23.Planner23Util() 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						planner.initAI(  )
						CommUtils.outblue("INITIAL MAP")
						planner.showMap(  )
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="exploreStep", cond=doswitch() )
				}	 
				state("exploreStep") { //this:State
					action { //it:State
						 stepCounter = stepCounter + 1  
						 val actions =  planner.planForGoal("$stepCounter","$stepCounter")
									CommUtils.outgreen("exploreStep $stepCounter path=$actions")
									planner.doPathOnMap(actions.toString())
						CommUtils.outblue("AFTER exploreStep $stepCounter ")
						planner.showCurrentRobotState(  )
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="backToHome", cond=doswitch() )
				}	 
				state("backToHome") { //this:State
					action { //it:State
						CommUtils.outblue("backToHome")
						 val actions = planner.planForGoal("0","0") 
								   CommUtils.outgreen("backToHome path=$actions")
								   planner.doPathOnMap(actions.toString())
								   planner.doMove("l")
						planner.showCurrentRobotState(  )
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="exploreStep", cond=doswitchGuarded({ planner.atHome() && stepCounter < maxNumSteps  
					}) )
					transition( edgeName="goto",targetState="endOfJob", cond=doswitchGuarded({! ( planner.atHome() && stepCounter < maxNumSteps  
					) }) )
				}	 
				state("endOfJob") { //this:State
					action { //it:State
						CommUtils.outblue("BYE.  ")
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
