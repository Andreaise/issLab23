/* Generated by AN DISI Unibo */ 
package it.unibo.basicrobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Basicrobot ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		  
		  var StepTime      = 0L
		  var StartTime     = 0L     
		  var Duration      = 0L   
		  var RobotType     = "" 
		  var CurrentMove   = "unkknown"
		  var StepSynchRes  = false
		   
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = false
						println("basicrobot | STARTS")
						uniborobots.robotSupport.create(myself ,"basicrobotConfig.json" )
						 RobotType = uniborobots.robotSupport.robotKind  
						uniborobots.robotSupport.move( "a"  )
						uniborobots.robotSupport.move( "d"  )
						updateResourceRep( "basicrobot(started)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("basicrobot  | waiting .................. ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t10",targetState="doStep",cond=whenRequest("step"))
					transition(edgeName="t11",targetState="execcmd",cond=whenDispatch("cmd"))
					transition(edgeName="t12",targetState="endwork",cond=whenDispatch("end"))
				}	 
				state("execcmd") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("cmd(MOVE)"), Term.createTerm("cmd(MOVE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentMove = payloadArg(0)  
								uniborobots.robotSupport.move( payloadArg(0)  )
								updateResourceRep( "moveactivated(${payloadArg(0)})"  
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("doStep") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("step(TIME)"), Term.createTerm("step(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									StepTime     = payloadArg(0).toLong()  	 
								updateResourceRep( "step(${StepTime})"  
								)
						}
						StartTime = getCurrentTime()
						println("basicrobot | doing doStep StepTime=$StepTime  ")
						 StepSynchRes = uniborobots.robotSupport.dostep( StepTime )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="stepok", cond=doswitchGuarded({ StepSynchRes  
					}) )
					transition( edgeName="goto",targetState="stepKo", cond=doswitchGuarded({! ( StepSynchRes  
					) }) )
				}	 
				state("stepok") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						uniborobots.robotSupport.move( "h"  )
						updateResourceRep( "stepDone($StepTime)"  
						)
						answer("step", "stepdone", "stepdone($StepTime)"   )  
						println("basicrobot | stepDone reply done")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("stepKo") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						Duration = getDuration(StartTime)
						uniborobots.robotSupport.move( "h"  )
						 var TunedDuration   =  ((Duration * 0.80)).toLong()    
						println("basicrobot | stepFail duration=$Duration  TunedDuration=$TunedDuration")
						uniborobots.robotSupport.move( "s"  )
						delay(TunedDuration)
						uniborobots.robotSupport.move( "h"  )
						updateResourceRep( "stepFail($Duration)"  
						)
						answer("step", "stepfailed", "stepfailed($Duration,obst)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("endwork") { //this:State
					action { //it:State
						updateResourceRep( "basicrobot(end)"  
						)
						terminate(1)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
