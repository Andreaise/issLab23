/* Generated by AN DISI Unibo */ 
package it.unibo.engager

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Engager ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		     
		  var Owner           = "unkknown"
		  var EngageCaller    = ""
		  var curConn : Interaction? = null 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						if(  ! currentMsg.isEvent()  
						 ){CommUtils.outblack("$name waiting ..")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleEngage",cond=whenRequest("engage"))
					transition(edgeName="t01",targetState="disengageRobot",cond=whenDispatch("disengage"))
					transition(edgeName="t02",targetState="checkTheOwner",cond=whenRequest("checkowner"))
				}	 
				state("handleEngage") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("engage(OWNER)"), Term.createTerm("engage(OWNER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 if( currentMsg.conn != null ) curConn = currentMsg.conn					
												   EngageCaller  = payloadArg(0)
												   if( curConn != null )
												   CommUtils.outmagenta("engager | engaged by remote $EngageCaller   on $curConn" )		
												   else 		   
												   CommUtils.outmagenta("engager | engaged by local $EngageCaller " )	
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="engageAccept", cond=doswitchGuarded({ Owner == "unkknown"  
					}) )
					transition( edgeName="goto",targetState="engageRefuse", cond=doswitchGuarded({! ( Owner == "unkknown"  
					) }) )
				}	 
				state("disengageRobot") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 Owner  = "unkknown"  
						forward("disengaged", "disengaged($Owner)" ,"basicrobot" ) 
						emitLocalStreamEvent("alarm", "alarm(disengaged)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("engageRefuse") { //this:State
					action { //it:State
						CommUtils.outblack("$name engage refused since already working for $Owner")
						answer("engage", "engagerefused", "engagerefused($Owner)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("engageAccept") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 Owner = EngageCaller  
						updateResourceRep( "workingfor($Owner)"  
						)
						answer("engage", "engagedone", "engagedone($Owner)"   )  
						forward("engaged", "engaged($Owner)" ,"basicrobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("handleEvent") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 CommUtils.outcyan("handleEvent $currentMsg") 
								   //val Data = currentMsg.msgContent()
								   val info = currentMsg.toString()
								   if( curConn != null ) CommUtils.forwardOnInterconn(curConn,info) //invio l'evento al caller'
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("checkTheOwner") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("checkowner(CALLER)"), Term.createTerm("checkowner(CALLER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val Caller = payloadArg(0)  
								CommUtils.outblack("$name checkTheOwner $Caller owner=$Owner")
								if(  Owner == Caller  
								 ){answer("checkowner", "checkownerok", "checkownerok(Owner)"   )  
								}
								else
								 {answer("checkowner", "checkownerfailed", "checkownerfailed(Owner)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
