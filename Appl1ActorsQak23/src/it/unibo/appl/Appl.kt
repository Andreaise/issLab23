/* Generated by AN DISI Unibo */ 
package it.unibo.appl

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Appl ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 		 
		//var NumEdges    = 0
		//var StepTime    = 350L
		//var basicrobot  = unibo.basicrobot23.Basicrobot23()
		//var result      =  true
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&  appl ACTIVE ...")
						  unibo.basicomm23.utils.Connection.trace=true
									utils.Appl1StateObject.setConfigFilePath("./robotConfig.json");
									unibo.basicomm23.utils.CommUtils.outblue(name + " | init $currentMsg"   ) 
									//delegate("isrunning","obsforpath");    	 
									//delegate("getpath","obsforpath");
						delegate("stopcmd", "consoleobs") 
						delegate("resumecmd", "consoleobs") 
						delegate("isrunning", "obsforpath") 
						delegate("getpath", "obsforpath") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="startboundary",cond=whenDispatch("startcmd"))
				}	 
				state("startboundary") { //this:State
					action { //it:State
						  utils.Appl1StateObject.initappl(myself, currentMsg)  
						println("startboundary  ")
						  utils.Appl1StateObject.doStepAsynch()  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="stepok",cond=whenDispatch("stepdone"))
					transition(edgeName="t02",targetState="stepko",cond=whenDispatch("stepfailed"))
					transition(edgeName="t03",targetState="stopped",cond=whenDispatch("stopappl"))
				}	 
				state("stepok") { //this:State
					action { //it:State
						delay(300) 
						  utils.Appl1StateObject.incNSteps()
						 			utils.Appl1StateObject.doStepAsynch() 
						updateResourceRep( "robot-stepdone"  
						)
						emitLocalStreamEvent("info", "info(robotstepdone)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="stepok",cond=whenDispatch("stepdone"))
					transition(edgeName="t05",targetState="stepko",cond=whenDispatch("stepfailed"))
					transition(edgeName="t06",targetState="stopped",cond=whenDispatch("stopappl"))
				}	 
				state("stepko") { //this:State
					action { //it:State
						println("stepko ")
						updateResourceRep( "robot-collision"  
						)
						emitLocalStreamEvent("info", "info(robotcollision)" ) 
						  utils.Appl1StateObject.incNEdges()
									utils.Appl1StateObject.getVr().turnLeft() 
						updateResourceRep( "robot-turnleft"  
						)
						emitLocalStreamEvent("info", "info(robotturnleft)" ) 
						if(  utils.Appl1StateObject.getNEdges() < 4  
						 ){delay(300) 
						  utils.Appl1StateObject.doStepAsynch()  
						}
						else
						 {forward("restart", "start(again)" ,"appl" ) 
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="stepok",cond=whenDispatch("stepdone"))
					transition(edgeName="t08",targetState="stepko",cond=whenDispatch("stepfailed"))
					transition(edgeName="t09",targetState="stopped",cond=whenDispatch("stopappl"))
					transition(edgeName="t010",targetState="consumePreviousStart",cond=whenDispatch("restart"))
				}	 
				state("stopped") { //this:State
					action { //it:State
						println("appl stopped ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="resumed",cond=whenDispatch("resumeappl"))
				}	 
				state("resumed") { //this:State
					action { //it:State
						println("appl resumed ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t012",targetState="stepok",cond=whenDispatch("stepdone"))
					transition(edgeName="t013",targetState="stepko",cond=whenDispatch("stepfailed"))
				}	 
				state("consumePreviousStart") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_consumePreviousStart", 
				 	 					  scope, context!!, "local_tout_appl_consumePreviousStart", 10.toLong() )
					}	 	 
					 transition(edgeName="t014",targetState="waittorestart",cond=whenTimeout("local_tout_appl_consumePreviousStart"))   
					transition(edgeName="t015",targetState="consumePreviousStart",cond=whenDispatch("startcmd"))
				}	 
				state("waittorestart") { //this:State
					action { //it:State
						  utils.Appl1StateObject.reset() 
						println("waittorestart")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t016",targetState="restart",cond=whenDispatch("startcmd"))
				}	 
				state("restart") { //this:State
					action { //it:State
						  utils.Appl1StateObject.setIsRunning(true) 
						         utils.Appl1StateObject.doStepAsynch()  
						println("restart")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t017",targetState="stepok",cond=whenDispatch("stepdone"))
					transition(edgeName="t018",targetState="stepko",cond=whenDispatch("stepfailed"))
				}	 
			}
		}
}
