/* Generated by AN DISI Unibo */ 
package it.unibo.obsforpath

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Obsforpath ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 val path = utils.PathStateObject()  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						subscribeToLocalActor("appl") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitmsgs", cond=doswitch() )
				}	 
				state("waitmsgs") { //this:State
					action { //it:State
						println("obsforpath waiting ...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t024",targetState="handleIsrunning",cond=whenRequest("isrunning"))
					transition(edgeName="t025",targetState="handlegetpath",cond=whenRequest("getpath"))
					transition(edgeName="t026",targetState="handleinfo",cond=whenEvent("info"))
				}	 
				state("handleinfo") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("info(ARG)"), Term.createTerm("info(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val move = payloadArg(0)  
								println("obsforpath handleinfo ${payloadArg(0)} ")
								 path.updatePath(  payloadArg(0)  )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitmsgs", cond=doswitch() )
				}	 
				state("handleIsrunning") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						  val r = utils.Appl1StateObject.getIsRunning( )  
						answer("isrunning", "runninganswer", "runninganswer(true)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitmsgs", cond=doswitch() )
				}	 
				state("handlegetpath") { //this:State
					action { //it:State
						 var Curpath = path.getCurrentPath()  
						println("obsforpath | current path=$Curpath")
						answer("getpath", "pathamswer", "pathamswer($Curpath)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitmsgs", cond=doswitch() )
				}	 
			}
		}
}
